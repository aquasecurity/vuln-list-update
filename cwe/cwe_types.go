// Code generated by xsdgen. DO NOT EDIT.
// Schema source: https://cwe.mitre.org/data/xsd/cwe_schema_v7.2.xsd

package cwe

import (
	"bytes"
	"encoding/xml"
	"time"
)

// May be one of Pillar, Class, Base, Variant, Compound
type AbstractionEnumeration string

// The AffectedResourcesType complex type is used to identify system resources that can be affected by an exploit of this weakness. If multiple resources could be affected, then each should be defined by its own Affected_Resource element.
type AffectedResourcesType struct {
	AffectedResource []ResourceEnumeration `xml:"http://cwe.mitre.org/cwe-7 Affected_Resource"`
}

type AlternateTerm struct {
	Term        string             `xml:"http://cwe.mitre.org/cwe-7 Term"`
	Description StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Description,omitempty"`
}

// The AlternateTermsType complex type indicates one or more other names used to describe this weakness. The required Term element contains the actual alternate term. The required Description element provides context for each alternate term by which this weakness may be known.
type AlternateTermsType struct {
	AlternateTerm []AlternateTerm `xml:"http://cwe.mitre.org/cwe-7 Alternate_Term"`
}

// The ApplicablePlatformsType complex type specifies the languages, operating systems, architectures, and technologies in which a given weakness could appear. A technology represents a generally accepted feature of a system and often refers to a high-level functional component within a system. The required Prevalence attribute identifies the regularity with which the weakness is applicable to that platform. When providing an operating system name, an optional Common Platform Enumeration (CPE) identifier can be used to a identify a specific OS.
type ApplicablePlatformsType struct {
	Language        []Language        `xml:"http://cwe.mitre.org/cwe-7 Language,omitempty"`
	OperatingSystem []OperatingSystem `xml:"http://cwe.mitre.org/cwe-7 Operating_System,omitempty"`
	Architecture    []Architecture    `xml:"http://cwe.mitre.org/cwe-7 Architecture,omitempty"`
	Technology      []Technology      `xml:"http://cwe.mitre.org/cwe-7 Technology,omitempty"`
}

type Architecture struct {
	Name       ArchitectureNameEnumeration  `xml:"Name,attr,omitempty"`
	Class      ArchitectureClassEnumeration `xml:"Class,attr,omitempty"`
	Prevalence PrevalenceEnumeration        `xml:"Prevalence,attr"`
}

// May be one of Embedded, Microcomputer, Workstation, Not Architecture-Specific
type ArchitectureClassEnumeration string

// May be one of Alpha, ARM, Itanium, Power Architecture, SPARC, x86, Other
type ArchitectureNameEnumeration string

// The AudienceType complex type provides a reference to the target stakeholders or groups for a view. For each stakeholder, the required Type element specifies the type of members that might be interested in the view. The required Description element provides some text describing what properties of the view this particular stakeholder might find useful.
type AudienceType struct {
	Stakeholder []Stakeholder `xml:"http://cwe.mitre.org/cwe-7 Stakeholder"`
}

// The BackgroundDetailsType complex type contains one or more Background_Detail elements, each of which contains information that is relevant but not related to the nature of the weakness itself.
type BackgroundDetailsType struct {
	BackgroundDetail []StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Background_Detail"`
}

type Categories struct {
	Category []CategoryType `xml:"http://cwe.mitre.org/cwe-7 Category"`
}

// A category is a collection of weaknesses based on some common characteristic or attribute. The shared attribute may be any number of things including, but not limited to, environment (J2EE, .NET), functional area (authentication, cryptography) and the relevant resource (credentials management, certificate issues). A Category is used primarily as an organizational mechanism for CWE and should not be mapped to by external sources.
//
// The required Summary element contains the key points that define the category and helps the user understand what the category is attempting to be. The optional Relationships element is used to define relationships (Member_Of and Has_Member) with other weaknesses, categories, and views. The optional Taxonomy_Mappings element is used to relate this category to similar categories in taxomomies outside of CWE. The optional References element is used to provide further reading and insight into this category. This element should be used when the category is based on external sources or projects. The optional Notes element is used to provide additional comments or clarifications that cannot be captured using the other elements of the category. The optional Content_History element is used to keep track of the original author of the category and any subsequent modifications to the content. This provides a means of contacting the authors and modifiers for clarifying ambiguities, or in merging overlapping contributions.
//
// The required ID attribute provides a unique identifier for the category. It is meant to be static for the lifetime of the category. If the category becomes deprecated, the ID should not be reused, and a placeholder for the deprecated category should be left in the catalog. The required Name attribute provides a descriptive title used to give the reader an idea of what characteristics this category represents. All words in the name should be capitalized except for articles and prepositions unless they begin or end the name. The required Status attribute defines the maturity of the information for this category. Please refer to the StatusEnumeration simple type for a list of valid values and their meanings.
type CategoryType struct {
	Summary          StructuredTextType   `xml:"http://cwe.mitre.org/cwe-7 Summary"`
	Relationships    RelationshipsType    `xml:"http://cwe.mitre.org/cwe-7 Relationships,omitempty"`
	TaxonomyMappings TaxonomyMappingsType `xml:"http://cwe.mitre.org/cwe-7 Taxonomy_Mappings,omitempty"`
	References       ReferencesType       `xml:"http://cwe.mitre.org/cwe-7 References,omitempty"`
	MappingNotes     MappingNotesType     `xml:"http://cwe.mitre.org/cwe-7 Mapping_Notes"`
	Notes            NotesType            `xml:"http://cwe.mitre.org/cwe-7 Notes,omitempty"`
	ContentHistory   ContentHistoryType   `xml:"http://cwe.mitre.org/cwe-7 Content_History"`
	ID               int                  `xml:"ID,attr"`
	Name             string               `xml:"Name,attr"`
	Status           StatusEnumeration    `xml:"Status,attr"`
}

// The CommonConsequencesType complex type is used to specify individual consequences associated with a weakness. The required Scope element identifies the security property that is violated. The optional Impact element describes the technical impact that arises if an adversary succeeds in exploiting this weakness. The optional Likelihood element identifies how likely the specific consequence is expected to be seen relative to the other consequences. For example, there may be high likelihood that a weakness will be exploited to achieve a certain impact, but a low likelihood that it will be exploited to achieve a different impact. The optional Note element provides additional commentary about a consequence.
//
// The optional Consequence_ID attribute is used by the internal CWE team to uniquely identify examples that are repeated across any number of individual weaknesses. To help make sure that the details of these common examples stay synchronized, the Consequence_ID is used to quickly identify those examples across CWE that should be identical. The identifier is a string and should match the following format: CC-1.
type CommonConsequencesType struct {
	Consequence []Consequence `xml:"http://cwe.mitre.org/cwe-7 Consequence"`
}

type Consequence struct {
	Scope         []ScopeEnumeration           `xml:"http://cwe.mitre.org/cwe-7 Scope"`
	Impact        []TechnicalImpactEnumeration `xml:"http://cwe.mitre.org/cwe-7 Impact"`
	Likelihood    LikelihoodEnumeration        `xml:"http://cwe.mitre.org/cwe-7 Likelihood,omitempty"`
	Note          StructuredTextType           `xml:"http://cwe.mitre.org/cwe-7 Note,omitempty"`
	ConsequenceID string                       `xml:"Consequence_ID,attr,omitempty"`
}

// The ContentHistoryType complex type provides elements to keep track of the original author of an entry and any subsequent modifications to the content. The required Submission element is used to identify the submitter and/or their organization, the date on which the submission was made, the CWE version and release date in which the new CWE entry was added, and any optional comments related to an entry. The optional Modification element is used to identify a modifier's name, organization, the date on which the Modification was made or suggested, the CWE version and release date in which the modification first appeared, and any related comments. A new Modification element should exist for each change made to the content. Modifications that change the meaning of the entry, or how it might be interpreted, should be marked with an importance of critical to bring it to the attention of anyone previously dependent on the weakness.  The optional Contribution element is used to identify a contributor's name, organization, the date, the CWE version and release date in which the contribution first appeared, and any related comments. This element has a single Type attribute, which indicates whether the contribution was part of general feedback given or actual content that was donated. The optional Previous_Entry_Name element is used to describe a previous name that was used for the entry. This should be filled out whenever a substantive name change occurs. The required Date attribute lists the date on which this name was no longer used, typically the date of the first CWE release that changed the previous name.  A Previous_Entry_Name element should align with a corresponding Modification element.
type ContentHistoryType struct {
	Submission        Submission          `xml:"http://cwe.mitre.org/cwe-7 Submission"`
	Modification      []Modification      `xml:"http://cwe.mitre.org/cwe-7 Modification,omitempty"`
	Contribution      []Contribution      `xml:"http://cwe.mitre.org/cwe-7 Contribution,omitempty"`
	PreviousEntryName []PreviousEntryName `xml:"http://cwe.mitre.org/cwe-7 Previous_Entry_Name,omitempty"`
}

type Contribution struct {
	ContributionName         string    `xml:"http://cwe.mitre.org/cwe-7 Contribution_Name,omitempty"`
	ContributionOrganization string    `xml:"http://cwe.mitre.org/cwe-7 Contribution_Organization,omitempty"`
	ContributionDate         time.Time `xml:"http://cwe.mitre.org/cwe-7 Contribution_Date"`
	ContributionVersion      string    `xml:"http://cwe.mitre.org/cwe-7 Contribution_Version,omitempty"`
	ContributionReleaseDate  time.Time `xml:"http://cwe.mitre.org/cwe-7 Contribution_ReleaseDate,omitempty"`
	ContributionComment      string    `xml:"http://cwe.mitre.org/cwe-7 Contribution_Comment,omitempty"`
	Type                     Type      `xml:"Type,attr"`
}

func (t *Contribution) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Contribution
	var layout struct {
		*T
		ContributionDate        *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Contribution_Date"`
		ContributionReleaseDate *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Contribution_ReleaseDate,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ContributionDate = (*xsdDate)(&layout.T.ContributionDate)
	layout.ContributionReleaseDate = (*xsdDate)(&layout.T.ContributionReleaseDate)
	return e.EncodeElement(layout, start)
}
func (t *Contribution) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Contribution
	var overlay struct {
		*T
		ContributionDate        *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Contribution_Date"`
		ContributionReleaseDate *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Contribution_ReleaseDate,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ContributionDate = (*xsdDate)(&overlay.T.ContributionDate)
	overlay.ContributionReleaseDate = (*xsdDate)(&overlay.T.ContributionReleaseDate)
	return d.DecodeElement(&overlay, &start)
}

type DemonstrativeExample struct {
	TitleText              string             `xml:"http://cwe.mitre.org/cwe-7 Title_Text,omitempty"`
	IntroText              StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Intro_Text"`
	BodyText               StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Body_Text,omitempty"`
	ExampleCode            StructuredCodeType `xml:"http://cwe.mitre.org/cwe-7 Example_Code,omitempty"`
	References             ReferencesType     `xml:"http://cwe.mitre.org/cwe-7 References,omitempty"`
	DemonstrativeExampleID string             `xml:"Demonstrative_Example_ID,attr,omitempty"`
}

// The DemonstrativeExamplesType complex type contains one or more Demonstrative_Example elements, each of which contains an example illustrating how a weakness may look in actual code. The optional Title_Text element provides a title for the example. The Intro_Text element describes the context and setting in which this code should be viewed, summarizing what the code is attempting to do. The Body_Text and Example_Code elements are a mixture of code and explanatory text about the example. The References element provides additional information.
//
// The optional Demonstrative_Example_ID attribute is used by the internal CWE team to uniquely identify examples that are repeated across any number of individual weaknesses. To help make sure that the details of these common examples stay synchronized, the Demonstrative_Example_ID is used to quickly identify those examples across CWE that should be identical. The identifier is a string and should match the following format: DX-1.
type DemonstrativeExamplesType struct {
	DemonstrativeExample []DemonstrativeExample `xml:"http://cwe.mitre.org/cwe-7 Demonstrative_Example"`
}

// May be one of High, Moderate, SOAR Partial, Opportunistic, Limited, None
type DetectionEffectivenessEnumeration string

type DetectionMethod struct {
	Method             DetectionMethodEnumeration        `xml:"http://cwe.mitre.org/cwe-7 Method"`
	Description        StructuredTextType                `xml:"http://cwe.mitre.org/cwe-7 Description"`
	Effectiveness      DetectionEffectivenessEnumeration `xml:"http://cwe.mitre.org/cwe-7 Effectiveness,omitempty"`
	EffectivenessNotes StructuredTextType                `xml:"http://cwe.mitre.org/cwe-7 Effectiveness_Notes,omitempty"`
	DetectionMethodID  string                            `xml:"Detection_Method_ID,attr,omitempty"`
}

// May be one of Automated Analysis, Automated Dynamic Analysis, Automated Static Analysis, Automated Static Analysis - Source Code, Automated Static Analysis - Binary or Bytecode, Fuzzing, Manual Analysis, Manual Dynamic Analysis, Manual Static Analysis, Manual Static Analysis - Source Code, Manual Static Analysis - Binary or Bytecode, White Box, Black Box, Architecture or Design Review, Dynamic Analysis with Manual Results Interpretation, Dynamic Analysis with Automated Results Interpretation, Formal Verification, Simulation / Emulation, Other
type DetectionMethodEnumeration string

// The DetectionMethodsType complex type is used to identify methods that may be employed to detect this weakness, including their strengths and limitations. The required Method element identifies the particular detection method being described. The required Description element is intended to provide some context of how this method can be applied to a specific weakness. The optional Effectiveness element says how effective the detection method may be in detecting the associated weakness. This assumes the use of best-of-breed tools, analysts, and methods. There is limited consideration for financial costs, labor, or time. The optional Effectiveness_Notes element provides additional discussion of the strengths and shortcomings of this detection method.
//
// The optional Detection_Method_ID attribute is used by the internal CWE team to uniquely identify methods that are repeated across any number of individual weaknesses. To help make sure that the details of these common methods stay synchronized, the Detection_Method_ID is used to quickly identify those Detection_Method elements across CWE that should be identical. The identifier is a string and should match the following format: DM-1.
type DetectionMethodsType struct {
	DetectionMethod []DetectionMethod `xml:"http://cwe.mitre.org/cwe-7 Detection_Method"`
}

// May be one of High, Moderate, Limited, Incidental, Discouraged Common Practice, Defense in Depth, None
type EffectivenessEnumeration string

// The ExploitationFactorsType complex type points out conditions or factors that could increase the likelihood of exploit for this weakness.
type ExploitationFactorsType struct {
	ExploitationFactor []StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Exploitation_Factor"`
}

// The ExternalReferenceType complex type defines a collection of elements that provide a pointer to where more information and deeper insight can be obtained. Examples would be a research paper or an excerpt from a publication.
//
// Not all of the elements need to be used, since some are designed for web references and others are designed for book references. The Author and Title elements should be filled out for all references if possible; Author is optional, but Title is required. The optional Edition element identifies the edition of the material being referenced in the event that multiple editions of the material exist. If the reference is part of a magazine or journal, the Publication element should be used to identify the name. The optional Publication_Year, Publication_Month, Publication_Day, and Publisher elements should be used to more specifically identify the book or publication via its date and publisher. The year must follow the YYYY format while the month must follow the --MM format and the day must follow the ---DD format. The URL and URL_Date elements are used to capture a URL for the material being referenced, if one exists, and the date when the URL was validated to exist.
//
// The required Reference_ID attribute exists to provide a globally unique identifier for the reference (e.g., REF-1). The ID is used by other entities to link to this external reference.
type ExternalReferenceType struct {
	Author           []string  `xml:"http://cwe.mitre.org/cwe-7 Author,omitempty"`
	Title            string    `xml:"http://cwe.mitre.org/cwe-7 Title"`
	Edition          string    `xml:"http://cwe.mitre.org/cwe-7 Edition,omitempty"`
	Publication      string    `xml:"http://cwe.mitre.org/cwe-7 Publication,omitempty"`
	PublicationYear  time.Time `xml:"http://cwe.mitre.org/cwe-7 Publication_Year,omitempty"`
	PublicationMonth time.Time `xml:"http://cwe.mitre.org/cwe-7 Publication_Month,omitempty"`
	PublicationDay   time.Time `xml:"http://cwe.mitre.org/cwe-7 Publication_Day,omitempty"`
	Publisher        string    `xml:"http://cwe.mitre.org/cwe-7 Publisher,omitempty"`
	URL              string    `xml:"http://cwe.mitre.org/cwe-7 URL,omitempty"`
	URLDate          time.Time `xml:"http://cwe.mitre.org/cwe-7 URL_Date,omitempty"`
	ReferenceID      string    `xml:"Reference_ID,attr"`
}

func (t *ExternalReferenceType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T ExternalReferenceType
	var layout struct {
		*T
		PublicationYear  *xsdGYear  `xml:"http://cwe.mitre.org/cwe-7 Publication_Year,omitempty"`
		PublicationMonth *xsdGMonth `xml:"http://cwe.mitre.org/cwe-7 Publication_Month,omitempty"`
		PublicationDay   *xsdGDay   `xml:"http://cwe.mitre.org/cwe-7 Publication_Day,omitempty"`
		URLDate          *xsdDate   `xml:"http://cwe.mitre.org/cwe-7 URL_Date,omitempty"`
	}
	layout.T = (*T)(t)
	layout.PublicationYear = (*xsdGYear)(&layout.T.PublicationYear)
	layout.PublicationMonth = (*xsdGMonth)(&layout.T.PublicationMonth)
	layout.PublicationDay = (*xsdGDay)(&layout.T.PublicationDay)
	layout.URLDate = (*xsdDate)(&layout.T.URLDate)
	return e.EncodeElement(layout, start)
}
func (t *ExternalReferenceType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T ExternalReferenceType
	var overlay struct {
		*T
		PublicationYear  *xsdGYear  `xml:"http://cwe.mitre.org/cwe-7 Publication_Year,omitempty"`
		PublicationMonth *xsdGMonth `xml:"http://cwe.mitre.org/cwe-7 Publication_Month,omitempty"`
		PublicationDay   *xsdGDay   `xml:"http://cwe.mitre.org/cwe-7 Publication_Day,omitempty"`
		URLDate          *xsdDate   `xml:"http://cwe.mitre.org/cwe-7 URL_Date,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.PublicationYear = (*xsdGYear)(&overlay.T.PublicationYear)
	overlay.PublicationMonth = (*xsdGMonth)(&overlay.T.PublicationMonth)
	overlay.PublicationDay = (*xsdGDay)(&overlay.T.PublicationDay)
	overlay.URLDate = (*xsdDate)(&overlay.T.URLDate)
	return d.DecodeElement(&overlay, &start)
}

type ExternalReferences struct {
	ExternalReference []ExternalReferenceType `xml:"http://cwe.mitre.org/cwe-7 External_Reference"`
}

// May be one of Authentication, Authorization, Code Libraries, Counters, Cryptography, Error Handling, Interprocess Communication, File Processing, Logging, Memory Management, Networking, Number Processing, Program Invocation, Protection Mechanism, Session Management, Signals, String Processing, Not Functional-Area-Specific, Power, Clock
type FunctionalAreaEnumeration string

// The FunctionalAreasType complex type contains one or more functional_area elements, each of which identifies the functional area in which the weakness is most likely to occur. For example, CWE-23: Relative Path Traversal may occur in functional areas of software related to file processing. Each applicable functional area should have a new Functional_Area element, and standard title capitalization should be applied to each area.
type FunctionalAreasType struct {
	FunctionalArea []FunctionalAreaEnumeration `xml:"http://cwe.mitre.org/cwe-7 Functional_Area"`
}

// May be one of Normal, Critical
type ImportanceEnumeration string

type Introduction struct {
	Phase PhaseEnumeration   `xml:"http://cwe.mitre.org/cwe-7 Phase"`
	Note  StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Note,omitempty"`
}

type Language struct {
	Name       LanguageNameEnumeration  `xml:"Name,attr,omitempty"`
	Class      LanguageClassEnumeration `xml:"Class,attr,omitempty"`
	Prevalence PrevalenceEnumeration    `xml:"Prevalence,attr"`
}

// May be one of Assembly, Compiled, Hardware Description Language, Interpreted, Not Language-Specific
type LanguageClassEnumeration string

// May be one of Ada, ARM Assembly, ASP, ASP.NET, Basic, C, C++, C#, COBOL, Fortran, F#, Go, HTML, Java, JavaScript, JSON, JSP, Objective-C, Pascal, Perl, PHP, Pseudocode, Python, Ruby, Rust, Shell, SQL, Swift, VB.NET, Verilog, VHDL, XML, x86 Assembly, Other
type LanguageNameEnumeration string

// May be one of High, Medium, Low, Unknown
type LikelihoodEnumeration string

// The MappingNotesType complex type provides guidance for when (and whether) to map an issue to this CWE entry or to suggest alternatives. The Usage element describes whether the CWE should be used for mapping vulnerabilities to their underlying weaknesses as part of root cause analysis. The Rationale element provides context for the Usage. The Comments element provides further clarification to the reader. The Reasons element uses a limited vocabulary to summarize the Usage. The Suggestions element includes suggestions for additional CWEs that might be more appropriate for the mapping task.
type MappingNotesType struct {
	Usage       UsageEnumeration   `xml:"http://cwe.mitre.org/cwe-7 Usage"`
	Rationale   StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Rationale"`
	Comments    StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Comments"`
	Reasons     ReasonsType        `xml:"http://cwe.mitre.org/cwe-7 Reasons"`
	Suggestions SuggestionsType    `xml:"http://cwe.mitre.org/cwe-7 Suggestions,omitempty"`
}

// The MemberType complex type may be used to establish a Has_Member or Member_Of type relationship within the designated View_ID. This type will establish a relationship between the container Category/View ID and the target CWE_ID.
type MemberType struct {
	CWEID  int `xml:"CWE_ID,attr"`
	ViewID int `xml:"View_ID,attr"`
}

type Mitigation struct {
	Phase              []PhaseEnumeration            `xml:"http://cwe.mitre.org/cwe-7 Phase,omitempty"`
	Strategy           MitigationStrategyEnumeration `xml:"http://cwe.mitre.org/cwe-7 Strategy,omitempty"`
	Description        StructuredTextType            `xml:"http://cwe.mitre.org/cwe-7 Description"`
	Effectiveness      EffectivenessEnumeration      `xml:"http://cwe.mitre.org/cwe-7 Effectiveness,omitempty"`
	EffectivenessNotes StructuredTextType            `xml:"http://cwe.mitre.org/cwe-7 Effectiveness_Notes,omitempty"`
	MitigationID       string                        `xml:"Mitigation_ID,attr,omitempty"`
}

// May be one of Attack Surface Reduction, Compilation or Build Hardening, Enforcement by Conversion, Environment Hardening, Firewall, Input Validation, Language Selection, Libraries or Frameworks, Resource Limitation, Output Encoding, Parameterization, Refactoring, Sandbox or Jail, Separation of Privilege
type MitigationStrategyEnumeration string

// The ModeOfIntroductionType complex type is used to provide information about how and when a given weakness may be introduced. If there are multiple possible introduction points, then a separate Introduction element should be included for each. The required Phase element identifies the point in the product life cycle at which the weakness may be introduced. The optional Note element identifies the typical scenarios under which the weakness may be introduced during the given phase.
type ModesOfIntroductionType struct {
	Introduction []Introduction `xml:"http://cwe.mitre.org/cwe-7 Introduction"`
}

type Modification struct {
	ModificationName         string                `xml:"http://cwe.mitre.org/cwe-7 Modification_Name,omitempty"`
	ModificationOrganization string                `xml:"http://cwe.mitre.org/cwe-7 Modification_Organization,omitempty"`
	ModificationDate         time.Time             `xml:"http://cwe.mitre.org/cwe-7 Modification_Date"`
	ModificationVersion      string                `xml:"http://cwe.mitre.org/cwe-7 Modification_Version,omitempty"`
	ModificationReleaseDate  time.Time             `xml:"http://cwe.mitre.org/cwe-7 Modification_ReleaseDate,omitempty"`
	ModificationImportance   ImportanceEnumeration `xml:"http://cwe.mitre.org/cwe-7 Modification_Importance,omitempty"`
	ModificationComment      string                `xml:"http://cwe.mitre.org/cwe-7 Modification_Comment,omitempty"`
}

func (t *Modification) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Modification
	var layout struct {
		*T
		ModificationDate        *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Modification_Date"`
		ModificationReleaseDate *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Modification_ReleaseDate,omitempty"`
	}
	layout.T = (*T)(t)
	layout.ModificationDate = (*xsdDate)(&layout.T.ModificationDate)
	layout.ModificationReleaseDate = (*xsdDate)(&layout.T.ModificationReleaseDate)
	return e.EncodeElement(layout, start)
}
func (t *Modification) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Modification
	var overlay struct {
		*T
		ModificationDate        *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Modification_Date"`
		ModificationReleaseDate *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Modification_ReleaseDate,omitempty"`
	}
	overlay.T = (*T)(t)
	overlay.ModificationDate = (*xsdDate)(&overlay.T.ModificationDate)
	overlay.ModificationReleaseDate = (*xsdDate)(&overlay.T.ModificationReleaseDate)
	return d.DecodeElement(&overlay, &start)
}

type Note struct {
	Items []string            `xml:",any"`
	Type  NoteTypeEnumeration `xml:"Type,attr"`
}

// May be one of Applicable Platform, Maintenance, Relationship, Research Gap, Terminology, Theoretical, Other
type NoteTypeEnumeration string

// The NotesType complex type contains one or more Note elements, each of which is used to provide any additional comments about an entry that cannot be captured using other elements.
type NotesType struct {
	Note []Note `xml:"http://cwe.mitre.org/cwe-7 Note"`
}

type ObservedExample struct {
	Reference   string             `xml:"http://cwe.mitre.org/cwe-7 Reference"`
	Description StructuredTextType `xml:"http://cwe.mitre.org/cwe-7 Description"`
	Link        string             `xml:"http://cwe.mitre.org/cwe-7 Link"`
}

// The ObservedExampleType complex type specifies references to a specific observed instance of a weakness in real-world products. Typically this will be a CVE reference. Each Observed_Example element represents a single example. The required Reference element should contain the identifier for the example being cited. For example, if a CVE is being cited, it should be of the standard CVE identifier format, such as CVE-2005-1951 or CVE-1999-0046. The required Description element should contain a brief description of the weakness being cited, without including irrelevant details such as the product name or attack vectors. The description should present an unambiguous correlation between the example being described and the weakness(es) that it is meant to exemplify. It should also be short and easy to understand. The Link element should provide a valid URL where more information regarding this example can be obtained.
type ObservedExampleType struct {
	ObservedExample []ObservedExample `xml:"http://cwe.mitre.org/cwe-7 Observed_Example"`
}

type OperatingSystem struct {
	Name       OperatingSystemNameEnumeration  `xml:"Name,attr,omitempty"`
	Version    string                          `xml:"Version,attr,omitempty"`
	CPEID      string                          `xml:"CPE_ID,attr,omitempty"`
	Class      OperatingSystemClassEnumeration `xml:"Class,attr,omitempty"`
	Prevalence PrevalenceEnumeration           `xml:"Prevalence,attr"`
}

// May be one of Linux, macOS, Unix, Windows, Not OS-Specific
type OperatingSystemClassEnumeration string

// May be one of AIX, Android, BlackBerry OS, Chrome OS, Darwin, FreeBSD, iOS, macOS, NetBSD, OpenBSD, Red Hat, Solaris, SUSE, tvOS, Ubuntu, watchOS, Windows 9x, Windows Embedded, Windows NT
type OperatingSystemNameEnumeration string

// May be one of Primary
type OrdinalEnumeration string

// May be one of Indirect, Primary, Resultant
type OrdinalityEnumeration string

// May be one of Policy, Requirements, Architecture and Design, Implementation, Build and Compilation, Testing, Documentation, Bundling, Distribution, Installation, System Configuration, Operation, Patching and Maintenance, Porting, Integration, Manufacturing, Decommissioning and End-of-Life
type PhaseEnumeration string

// The PotentialMitigationsType complex type is used to describe potential mitigations associated with a weakness. It contains one or more Mitigation elements, which each represent individual mitigations for the weakness. The Phase element indicates the development life cycle phase during which this particular mitigation may be applied. The Strategy element describes a general strategy for protecting a system to which this mitigation contributes. The Effectiveness element summarizes how effective the mitigation may be in preventing the weakness. The Description element contains a description of this individual mitigation including any strengths and shortcomings of this mitigation for the weakness.
//
// The optional Mitigation_ID attribute is used by the internal CWE team to uniquely identify mitigations that are repeated across any number of individual weaknesses. To help make sure that the details of these common mitigations stay synchronized, the Mitigation_ID is used to quickly identify those mitigation elements across CWE that should be identical. The identifier is a string and should match the following format: MIT-1.
type PotentialMitigationsType struct {
	Mitigation []Mitigation `xml:"http://cwe.mitre.org/cwe-7 Mitigation"`
}

// May be one of Often, Sometimes, Rarely, Undetermined
type PrevalenceEnumeration string

type PreviousEntryName struct {
	Value   string    `xml:",chardata"`
	Date    time.Time `xml:"Date,attr"`
	Version string    `xml:"Version,attr,omitempty"`
}

func (t *PreviousEntryName) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T PreviousEntryName
	var layout struct {
		*T
		Date *xsdDate `xml:"Date,attr"`
	}
	layout.T = (*T)(t)
	layout.Date = (*xsdDate)(&layout.T.Date)
	return e.EncodeElement(layout, start)
}
func (t *PreviousEntryName) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T PreviousEntryName
	var overlay struct {
		*T
		Date *xsdDate `xml:"Date,attr"`
	}
	overlay.T = (*T)(t)
	overlay.Date = (*xsdDate)(&overlay.T.Date)
	return d.DecodeElement(&overlay, &start)
}

type Reason struct {
	Type ReasonEnumeration `xml:"Type,attr"`
}

// May be one of Abstraction, Category, View, Deprecated, Potential Deprecation, Frequent Misuse, Frequent Misinterpretation, Multiple Use, CWE Overlap, Acceptable-Use, Potential Major Changes, Other
type ReasonEnumeration string

// The ReasonsType complex type is used to identify the different reasons to why a CWE should not be considered.
type ReasonsType struct {
	Reason []Reason `xml:"http://cwe.mitre.org/cwe-7 Reason"`
}

type Reference struct {
	ExternalReferenceID string `xml:"External_Reference_ID,attr"`
	Section             string `xml:"Section,attr,omitempty"`
}

// The ReferencesType complex type contains one or more reference elements, each of which is used to link to an external reference defined within the catalog. The required External_Reference_ID attribute represents the external reference entry being linked to (e.g., REF-1). Text or quotes within the same CWE entity can cite this External_Reference_ID similar to how a footnote is used, and should use the format [REF-1]. The optional Section attribute holds any section title or page number that is specific to this use of the reference.
type ReferencesType struct {
	Reference []Reference `xml:"http://cwe.mitre.org/cwe-7 Reference"`
}

type RelatedAttackPattern struct {
	CAPECID int `xml:"CAPEC_ID,attr"`
}

// The RelatedAttackPatternsType complex type contains references to attack patterns associated with this weakness. The association implies those attack patterns may be applicable if an instance of this weakness exists. Each related attack pattern is identified by a CAPEC identifier.
type RelatedAttackPatternsType struct {
	RelatedAttackPattern []RelatedAttackPattern `xml:"http://cwe.mitre.org/cwe-7 Related_Attack_Pattern"`
}

// May be one of ChildOf, ParentOf, StartsWith, CanFollow, CanPrecede, RequiredBy, Requires, CanAlsoBe, PeerOf
type RelatedNatureEnumeration string

type RelatedWeakness struct {
	Nature  RelatedNatureEnumeration `xml:"Nature,attr"`
	CWEID   int                      `xml:"CWE_ID,attr"`
	ViewID  int                      `xml:"View_ID,attr"`
	ChainID int                      `xml:"Chain_ID,attr,omitempty"`
	Ordinal OrdinalEnumeration       `xml:"Ordinal,attr,omitempty"`
}

// The RelatedWeaknessesType complex type is used to refer to other weaknesses that differ only in their level of abstraction. It contains one or more Related_Weakness elements, each of which is used to link to the CWE identifier of the other Weakness. The nature of the relation is captured by the Nature attribute. Please see the RelatedNatureEnumeration simple type definition for details about the valid value and meanings. The optional Chain_ID attribute specifies the unique ID of a named chain that a CanFollow or CanPrecede relationship pertains to. The optional Ordinal attribute is used to determine if this relationship is the primary ChildOf relationship for this weakness for a given View_ID. This attribute can only have the value "Primary" and should only be included for the primary parent/child relationship. For each unique triple of <Nature, CWE_ID, View_ID>, there should be only one relationship that is given a "Primary" ordinal.
type RelatedWeaknessesType struct {
	RelatedWeakness []RelatedWeakness `xml:"http://cwe.mitre.org/cwe-7 Related_Weakness"`
}

// The RelationshipsType complex type provides elements to show the associated relationships with a given view or category. The Member_Of element is used to denote the individual categories that are included as part of the target view. The Has_Member element is used to define the weaknesses or other categories that are grouped together by a category. In both cases, the required MemberType's CWE_ID attribute specifies the unique CWE ID that is the target entry of the relationship, while the View_ID specifies which view the given relationship is relevant to.
type RelationshipsType struct {
	MemberOf  []MemberType `xml:"http://cwe.mitre.org/cwe-7 Member_Of,omitempty"`
	HasMember []MemberType `xml:"http://cwe.mitre.org/cwe-7 Has_Member,omitempty"`
}

// May be one of CPU, File or Directory, Memory, System Process, Other
type ResourceEnumeration string

// May be one of Confidentiality, Integrity, Availability, Access Control, Accountability, Authentication, Authorization, Non-Repudiation, Other
type ScopeEnumeration string

type Stakeholder struct {
	Type        StakeholderEnumeration `xml:"http://cwe.mitre.org/cwe-7 Type"`
	Description string                 `xml:"http://cwe.mitre.org/cwe-7 Description,omitempty"`
}

// May be one of Academic Researchers, Applied Researchers, Assessment Teams, Assessment Tool Vendors, CWE Team, Educators, Hardware Designers, Information Providers, Product Customers, Product Vendors, Software Developers, Vulnerability Analysts, Other
type StakeholderEnumeration string

// May be one of Deprecated, Draft, Incomplete, Obsolete, Stable, Usable
type StatusEnumeration string

// May be one of Chain, Composite, Simple
type StructureEnumeration string

// May be one of Attack, Bad, Good, Informative, Mitigation, Result
type StructuredCodeNatureEnumeration string

// The StructuredCodeType complex type is used to present source code examples and other structured text that is not a regular paragraph. It allows embedded XHTML content to enable formatting of the code. The required Nature attribute states what type of code the example shows.  The optional Language attribute states which source code language is used in the example. This is mostly appropriate when the Nature is "good" or "bad".
type StructuredCodeType struct {
	Items    []string                        `xml:",any"`
	Language LanguageNameEnumeration         `xml:"Language,attr,omitempty"`
	Nature   StructuredCodeNatureEnumeration `xml:"Nature,attr"`
}

// The StructuredTextType complex type is used to allow XHTML content embedded within standard string data. Some common elements are: <BR/> to insert a line break, <UL><LI/></UL> to create a bulleted list, <OL><LI/></OL> to create a numbered list, and <DIV style="margin-left: 40px"></DIV> to create a new indented section.
type StructuredTextType []string

func (a StructuredTextType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	var output struct {
		ArrayType string   `xml:"http://schemas.xmlsoap.org/wsdl/ arrayType,attr"`
		Items     []string `xml:" item"`
	}
	output.Items = []string(a)
	start.Attr = append(start.Attr, xml.Attr{Name: xml.Name{"", "xmlns:ns1"}, Value: "http://www.w3.org/2001/XMLSchema"})
	output.ArrayType = "ns1:anyType[]"
	return e.EncodeElement(&output, start)
}
func (a *StructuredTextType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) (err error) {
	var tok xml.Token
	for tok, err = d.Token(); err == nil; tok, err = d.Token() {
		if tok, ok := tok.(xml.StartElement); ok {
			var item string
			if err = d.DecodeElement(&item, &tok); err == nil {
				*a = append(*a, item)
			}
		}
		if _, ok := tok.(xml.EndElement); ok {
			break
		}
	}
	return err
}

type Submission struct {
	SubmissionName         string    `xml:"http://cwe.mitre.org/cwe-7 Submission_Name,omitempty"`
	SubmissionOrganization string    `xml:"http://cwe.mitre.org/cwe-7 Submission_Organization,omitempty"`
	SubmissionDate         time.Time `xml:"http://cwe.mitre.org/cwe-7 Submission_Date"`
	SubmissionVersion      string    `xml:"http://cwe.mitre.org/cwe-7 Submission_Version"`
	SubmissionReleaseDate  time.Time `xml:"http://cwe.mitre.org/cwe-7 Submission_ReleaseDate"`
	SubmissionComment      string    `xml:"http://cwe.mitre.org/cwe-7 Submission_Comment,omitempty"`
}

func (t *Submission) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T Submission
	var layout struct {
		*T
		SubmissionDate        *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Submission_Date"`
		SubmissionReleaseDate *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Submission_ReleaseDate"`
	}
	layout.T = (*T)(t)
	layout.SubmissionDate = (*xsdDate)(&layout.T.SubmissionDate)
	layout.SubmissionReleaseDate = (*xsdDate)(&layout.T.SubmissionReleaseDate)
	return e.EncodeElement(layout, start)
}
func (t *Submission) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T Submission
	var overlay struct {
		*T
		SubmissionDate        *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Submission_Date"`
		SubmissionReleaseDate *xsdDate `xml:"http://cwe.mitre.org/cwe-7 Submission_ReleaseDate"`
	}
	overlay.T = (*T)(t)
	overlay.SubmissionDate = (*xsdDate)(&overlay.T.SubmissionDate)
	overlay.SubmissionReleaseDate = (*xsdDate)(&overlay.T.SubmissionReleaseDate)
	return d.DecodeElement(&overlay, &start)
}

type Suggestion struct {
	CWEID   int    `xml:"CWE_ID,attr"`
	Comment string `xml:"Comment,attr"`
}

// The SuggestionsType complex type is used to suggest other CWE entries that might be more appropriate to use for mapping.
type SuggestionsType struct {
	Suggestion []Suggestion `xml:"http://cwe.mitre.org/cwe-7 Suggestion"`
}

type TaxonomyMapping struct {
	EntryID      string                        `xml:"http://cwe.mitre.org/cwe-7 Entry_ID,omitempty"`
	EntryName    string                        `xml:"http://cwe.mitre.org/cwe-7 Entry_Name,omitempty"`
	MappingFit   TaxonomyMappingFitEnumeration `xml:"http://cwe.mitre.org/cwe-7 Mapping_Fit,omitempty"`
	TaxonomyName TaxonomyNameEnumeration       `xml:"Taxonomy_Name,attr"`
}

// May be one of Exact, CWE More Abstract, CWE More Specific, Imprecise, Perspective
type TaxonomyMappingFitEnumeration string

// The TaxonomyMappingsType complex type is used to provide a mapping from an entry (Weakness or Category) in CWE to an equivalent entry in a different taxonomy. The required Taxonomy_Name attribute identifies the taxonomy to which the mapping is being made. The Entry_ID and Entry_Name elements identify the ID and name of the entry which is being mapped. The Mapping_Fit element identifies how close the CWE is to the entry in the taxonomy.
type TaxonomyMappingsType struct {
	TaxonomyMapping []TaxonomyMapping `xml:"http://cwe.mitre.org/cwe-7 Taxonomy_Mapping"`
}

// May be one of 7 Pernicious Kingdoms, 19 Deadly Sins, Aslam, Bishop, CERT C Secure Coding, CERT C++ Secure Coding, The CERT Oracle Secure Coding Standard for Java (2011), CLASP, ISA/IEC 62443, Landwehr, OMG ASCSM, OMG ASCRM, OMG ASCMM, OMG ASCPEM, OWASP Top Ten 2004, OWASP Top Ten 2007, OWASP Top Ten, PLOVER, Protection Analysis, RISOS, SEI CERT C Coding Standard, SEI CERT C++ Coding Standard, SEI CERT Oracle Coding Standard for Java, SEI CERT Perl Coding Standard, Software Fault Patterns, Weber, Karger, Paradkar, WASC
type TaxonomyNameEnumeration string

// May be one of Modify Memory, Read Memory, Modify Files or Directories, Read Files or Directories, Modify Application Data, Read Application Data, DoS: Crash, Exit, or Restart, DoS: Amplification, DoS: Instability, DoS: Resource Consumption (CPU), DoS: Resource Consumption (Memory), DoS: Resource Consumption (Other), Execute Unauthorized Code or Commands, Gain Privileges or Assume Identity, Bypass Protection Mechanism, Hide Activities, Alter Execution Logic, Quality Degradation, Unexpected State, Varies by Context, Reduce Maintainability, Reduce Performance, Reduce Reliability, Other
type TechnicalImpactEnumeration string

type Technology struct {
	Name       TechnologyNameEnumeration  `xml:"Name,attr,omitempty"`
	Class      TechnologyClassEnumeration `xml:"Class,attr,omitempty"`
	Prevalence PrevalenceEnumeration      `xml:"Prevalence,attr"`
}

// May be one of Client Server, Cloud Computing, ICS/OT, Mainframe, Mobile, N-Tier, SOA, System on Chip, Web Based, Not Technology-Specific
type TechnologyClassEnumeration string

// May be one of AI/ML, Web Server, Database Server, Accelerator Hardware, Analog and Mixed Signal Hardware, Audio/Video Hardware, Bus/Interface Hardware, Clock/Counter Hardware, Communication Hardware, Controller Hardware, Memory Hardware, Microcontroller Hardware, Network on Chip Hardware, Power Management Hardware, Processor Hardware, Security Hardware, Sensor Hardware, Storage Hardware, Test/Debug Hardware, Other
type TechnologyNameEnumeration string

// May be one of Content, Feedback
type Type string

// May be one of Discouraged, Prohibited, Allowed, Allowed-with-Review
type UsageEnumeration string

// A view represents a perspective with which one might look at the weaknesses in the catalog. There are three different types of views as defined by the type attribute: graphs, explicit slices, and implicit slices. The members of a view are either defined externally through the members element (in the case of a graph or an explicit slice) or by the optional filter element (in the case of an implicit slice).
//
// The required Objective element describes the perspective from which the view has been constructed. The optional Audience element provides a reference to the target stakeholders or groups for whom the view is most relevant. The optional Members element is used to define Member_Of relationships with categories. The optional Filter element is only used for implicit slices (see the Type attribute) and holds an XSL query for identifying which entries are members of the view. The optional References element is used to provide further reading and insight into this view. This element should be used when the view is based on external sources or projects. The optional Notes element is used to provide any additional comments that cannot be captured using the other elements of the view. The optional Content_History element is used to keep track of the original author of the view and any subsequent modifications to the content. This provides a means of contacting the authors and modifiers for clarifying ambiguities, or in merging overlapping contributions.
//
// The required ID attribute provides a unique identifier for the view. It is meant to be static for the lifetime of the view. If the view becomes deprecated, the ID should not be reused, and a placeholder for the deprecated view should be left in the catalog. The required Name attribute provides a descriptive title used to give the reader an idea of what perspective this view represents. All words in the name should be capitalized except for articles and prepositions, unless they begin or end the name. The required Type attribute describes how this view is being constructed. Please refer to the ViewTypeEnumeration simple type for a list of valid values and their meanings. The required Status attribute defines the maturity of the information for this view. Please refer to the StatusEnumeration simple type for a list of valid values and their meanings.
type ViewType struct {
	Objective      StructuredTextType  `xml:"http://cwe.mitre.org/cwe-7 Objective"`
	Audience       AudienceType        `xml:"http://cwe.mitre.org/cwe-7 Audience,omitempty"`
	Members        RelationshipsType   `xml:"http://cwe.mitre.org/cwe-7 Members,omitempty"`
	Filter         string              `xml:"http://cwe.mitre.org/cwe-7 Filter,omitempty"`
	References     ReferencesType      `xml:"http://cwe.mitre.org/cwe-7 References,omitempty"`
	MappingNotes   MappingNotesType    `xml:"http://cwe.mitre.org/cwe-7 Mapping_Notes"`
	Notes          NotesType           `xml:"http://cwe.mitre.org/cwe-7 Notes,omitempty"`
	ContentHistory ContentHistoryType  `xml:"http://cwe.mitre.org/cwe-7 Content_History"`
	ID             int                 `xml:"ID,attr"`
	Name           string              `xml:"Name,attr"`
	Type           ViewTypeEnumeration `xml:"Type,attr"`
	Status         StatusEnumeration   `xml:"Status,attr"`
}

// May be one of Implicit, Explicit, Graph
type ViewTypeEnumeration string

type Views struct {
	View []ViewType `xml:"http://cwe.mitre.org/cwe-7 View"`
}

type WeaknessCatalog struct {
	Weaknesses         Weaknesses         `xml:"http://cwe.mitre.org/cwe-7 Weaknesses,omitempty"`
	Categories         Categories         `xml:"http://cwe.mitre.org/cwe-7 Categories,omitempty"`
	Views              Views              `xml:"http://cwe.mitre.org/cwe-7 Views,omitempty"`
	ExternalReferences ExternalReferences `xml:"http://cwe.mitre.org/cwe-7 External_References,omitempty"`
	Name               string             `xml:"Name,attr"`
	Version            string             `xml:"Version,attr"`
	Date               time.Time          `xml:"Date,attr"`
}

func (t *WeaknessCatalog) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type T WeaknessCatalog
	var layout struct {
		*T
		Date *xsdDate `xml:"Date,attr"`
	}
	layout.T = (*T)(t)
	layout.Date = (*xsdDate)(&layout.T.Date)
	return e.EncodeElement(layout, start)
}
func (t *WeaknessCatalog) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type T WeaknessCatalog
	var overlay struct {
		*T
		Date *xsdDate `xml:"Date,attr"`
	}
	overlay.T = (*T)(t)
	overlay.Date = (*xsdDate)(&overlay.T.Date)
	return d.DecodeElement(&overlay, &start)
}

// The WeaknessOrdinalitiesType complex type indicates potential ordering relationships with other weaknesses. The required Ordinality element identifies whether the weakness has a primary, resultant, or indirect relationship. The optional Description contains the context in which the relationship exists. It is important to note that it is possible for the same entry to be primary in some instances and resultant in others.
type WeaknessOrdinalitiesType struct {
	WeaknessOrdinality []WeaknessOrdinality `xml:"http://cwe.mitre.org/cwe-7 Weakness_Ordinality"`
}

type WeaknessOrdinality struct {
	Ordinality  OrdinalityEnumeration `xml:"http://cwe.mitre.org/cwe-7 Ordinality"`
	Description string                `xml:"http://cwe.mitre.org/cwe-7 Description,omitempty"`
}

// A weakness is a mistake or condition that, if left unaddressed, could under the proper conditions contribute to a cyber-enabled capability being vulnerable to attack, allowing an adversary to make items function in unintended ways. This complexType is used to describe a specific type of weakness and provide a variety of information related to it.
//
// The required Description should be short and limited to the key points that define this weakness. The optional Extended_Description element provides a place for additional details important to this weakness, but that are not necessary to convey the fundamental concept behind the weakness. A number of other optional elements are available, each of which is described in more detail within the corresponding complexType that it references.
//
// The required ID attribute provides a unique identifier for the entry. It is considered static for the lifetime of the entry. If this entry becomes deprecated, the identifier will not be reused. The required Name attribute is a string that identifies the entry. The name should focus on the weakness being described and should avoid mentioning the attack that exploits the weakness or the consequences of exploiting the weakness. All words in the entry name should be capitalized except for articles and prepositions, unless they begin or end the name. Subsequent words in a hyphenated chain are also not capitalized. The required Abstraction attribute defines the abstraction level for this weakness. The required Structure attribute defines the structural nature of the weakness. The required Status attribute defines the maturity of the information for this weakness.
type WeaknessType struct {
	Description           string                    `xml:"http://cwe.mitre.org/cwe-7 Description"`
	ExtendedDescription   StructuredTextType        `xml:"http://cwe.mitre.org/cwe-7 Extended_Description,omitempty"`
	RelatedWeaknesses     RelatedWeaknessesType     `xml:"http://cwe.mitre.org/cwe-7 Related_Weaknesses,omitempty"`
	WeaknessOrdinalities  WeaknessOrdinalitiesType  `xml:"http://cwe.mitre.org/cwe-7 Weakness_Ordinalities,omitempty"`
	ApplicablePlatforms   ApplicablePlatformsType   `xml:"http://cwe.mitre.org/cwe-7 Applicable_Platforms,omitempty"`
	BackgroundDetails     BackgroundDetailsType     `xml:"http://cwe.mitre.org/cwe-7 Background_Details,omitempty"`
	AlternateTerms        AlternateTermsType        `xml:"http://cwe.mitre.org/cwe-7 Alternate_Terms,omitempty"`
	ModesOfIntroduction   ModesOfIntroductionType   `xml:"http://cwe.mitre.org/cwe-7 Modes_Of_Introduction,omitempty"`
	ExploitationFactors   ExploitationFactorsType   `xml:"http://cwe.mitre.org/cwe-7 Exploitation_Factors,omitempty"`
	LikelihoodOfExploit   LikelihoodEnumeration     `xml:"http://cwe.mitre.org/cwe-7 Likelihood_Of_Exploit,omitempty"`
	CommonConsequences    CommonConsequencesType    `xml:"http://cwe.mitre.org/cwe-7 Common_Consequences,omitempty"`
	DetectionMethods      DetectionMethodsType      `xml:"http://cwe.mitre.org/cwe-7 Detection_Methods,omitempty"`
	PotentialMitigations  PotentialMitigationsType  `xml:"http://cwe.mitre.org/cwe-7 Potential_Mitigations,omitempty"`
	DemonstrativeExamples DemonstrativeExamplesType `xml:"http://cwe.mitre.org/cwe-7 Demonstrative_Examples,omitempty"`
	ObservedExamples      ObservedExampleType       `xml:"http://cwe.mitre.org/cwe-7 Observed_Examples,omitempty"`
	FunctionalAreas       FunctionalAreasType       `xml:"http://cwe.mitre.org/cwe-7 Functional_Areas,omitempty"`
	AffectedResources     AffectedResourcesType     `xml:"http://cwe.mitre.org/cwe-7 Affected_Resources,omitempty"`
	TaxonomyMappings      TaxonomyMappingsType      `xml:"http://cwe.mitre.org/cwe-7 Taxonomy_Mappings,omitempty"`
	RelatedAttackPatterns RelatedAttackPatternsType `xml:"http://cwe.mitre.org/cwe-7 Related_Attack_Patterns,omitempty"`
	References            ReferencesType            `xml:"http://cwe.mitre.org/cwe-7 References,omitempty"`
	MappingNotes          MappingNotesType          `xml:"http://cwe.mitre.org/cwe-7 Mapping_Notes"`
	Notes                 NotesType                 `xml:"http://cwe.mitre.org/cwe-7 Notes,omitempty"`
	ContentHistory        ContentHistoryType        `xml:"http://cwe.mitre.org/cwe-7 Content_History"`
	ID                    int                       `xml:"ID,attr"`
	Name                  string                    `xml:"Name,attr"`
	Abstraction           AbstractionEnumeration    `xml:"Abstraction,attr"`
	Structure             StructureEnumeration      `xml:"Structure,attr"`
	Status                StatusEnumeration         `xml:"Status,attr"`
	Diagram               string                    `xml:"Diagram,attr,omitempty"`
}

type Weaknesses struct {
	Weakness []WeaknessType `xml:"http://cwe.mitre.org/cwe-7 Weakness"`
}

type xsdDate time.Time

func (t *xsdDate) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006-01-02")
}
func (t xsdDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdDate) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
func _unmarshalTime(text []byte, t *time.Time, format string) (err error) {
	s := string(bytes.TrimSpace(text))
	*t, err = time.Parse(format, s)
	if _, ok := err.(*time.ParseError); ok {
		*t, err = time.Parse(format+"Z07:00", s)
	}
	return err
}
func _marshalTime(t time.Time, format string) ([]byte, error) {
	return []byte(t.Format(format + "Z07:00")), nil
}

type xsdGDay time.Time

func (t *xsdGDay) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "---02")
}
func (t xsdGDay) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "---02")
}
func (t xsdGDay) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGDay) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGMonth time.Time

func (t *xsdGMonth) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "--01")
}
func (t xsdGMonth) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "--01")
}
func (t xsdGMonth) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGMonth) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}

type xsdGYear time.Time

func (t *xsdGYear) UnmarshalText(text []byte) error {
	return _unmarshalTime(text, (*time.Time)(t), "2006")
}
func (t xsdGYear) MarshalText() ([]byte, error) {
	return _marshalTime((time.Time)(t), "2006")
}
func (t xsdGYear) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	if (time.Time)(t).IsZero() {
		return nil
	}
	m, err := t.MarshalText()
	if err != nil {
		return err
	}
	return e.EncodeElement(m, start)
}
func (t xsdGYear) MarshalXMLAttr(name xml.Name) (xml.Attr, error) {
	if (time.Time)(t).IsZero() {
		return xml.Attr{}, nil
	}
	m, err := t.MarshalText()
	return xml.Attr{Name: name, Value: string(m)}, err
}
